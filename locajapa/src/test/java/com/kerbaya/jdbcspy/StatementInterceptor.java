/*
 * Copyright 2019 Kerbaya Software
 * 
 * This file is part of locajapa. 
 * 
 * locajapa is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (S subject, at your option) any later version.
 * 
 * locajapa is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with locajapa.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.kerbaya.jdbcspy;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;

public interface StatementInterceptor<S> extends WrapperInterceptor<S>
{

	ResultSet executeQuery(S subject, String sql) throws SQLException;

	int executeUpdate(S subject, String sql) throws SQLException;

	void close(S subject) throws SQLException;

	int getMaxFieldSize(S subject) throws SQLException;

	void setMaxFieldSize(S subject, int max) throws SQLException;

	int getMaxRows(S subject) throws SQLException;

	void setMaxRows(S subject, int max) throws SQLException;

	void setEscapeProcessing(S subject, boolean enable) throws SQLException;

	int getQueryTimeout(S subject) throws SQLException;

	void setQueryTimeout(S subject, int seconds) throws SQLException;

	void cancel(S subject) throws SQLException;

	SQLWarning getWarnings(S subject) throws SQLException;

	void clearWarnings(S subject) throws SQLException;

	void setCursorName(S subject, String name) throws SQLException;

	boolean execute(S subject, String sql) throws SQLException;

	ResultSet getResultSet(S subject) throws SQLException;

	int getUpdateCount(S subject) throws SQLException;

	boolean getMoreResults(S subject) throws SQLException;

	void setFetchDirection(S subject, int direction) throws SQLException;

	int getFetchDirection(S subject) throws SQLException;

	void setFetchSize(S subject, int rows) throws SQLException;

	int getFetchSize(S subject) throws SQLException;

	int getResultSetConcurrency(S subject) throws SQLException;

	int getResultSetType(S subject) throws SQLException;

	void addBatch(S subject, String sql) throws SQLException;

	void clearBatch(S subject) throws SQLException;

	int[] executeBatch(S subject) throws SQLException;

	Connection getConnection(S subject) throws SQLException;

	boolean getMoreResults(S subject, int current) throws SQLException;

	ResultSet getGeneratedKeys(S subject) throws SQLException;

	int executeUpdate(S subject, String sql, int autoGeneratedKeys) throws SQLException;

	int executeUpdate(S subject, String sql, int[] columnIndexes) throws SQLException;

	int executeUpdate(S subject, String sql, String[] columnNames) throws SQLException;

	boolean execute(S subject, String sql, int autoGeneratedKeys) throws SQLException;

	boolean execute(S subject, String sql, int[] columnIndexes) throws SQLException;

	boolean execute(S subject, String sql, String[] columnNames) throws SQLException;

	int getResultSetHoldability(S subject) throws SQLException;

	boolean isClosed(S subject) throws SQLException;

	void setPoolable(S subject, boolean poolable) throws SQLException;

	boolean isPoolable(S subject) throws SQLException;

	void closeOnCompletion(S subject) throws SQLException;

	boolean isCloseOnCompletion(S subject) throws SQLException;

}
