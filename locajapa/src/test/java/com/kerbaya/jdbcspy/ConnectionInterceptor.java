/*
 * Copyright 2019 Kerbaya Software
 * 
 * This file is part of locajapa. 
 * 
 * locajapa is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (C subject, at your option) any later version.
 * 
 * locajapa is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with locajapa.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.kerbaya.jdbcspy;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public interface ConnectionInterceptor<C> extends WrapperInterceptor<C>
{

	Statement createStatement(C subject) throws SQLException;

	PreparedStatement prepareStatement(C subject, String sql) throws SQLException;

	CallableStatement prepareCall(C subject, String sql) throws SQLException;

	String nativeSQL(C subject, String sql) throws SQLException;

	void setAutoCommit(C subject, boolean autoCommit) throws SQLException;

	boolean getAutoCommit(C subject) throws SQLException;

	void commit(C subject) throws SQLException;

	void rollback(C subject) throws SQLException;

	void close(C subject) throws SQLException;

	boolean isClosed(C subject) throws SQLException;

	DatabaseMetaData getMetaData(C subject) throws SQLException;

	void setReadOnly(C subject, boolean readOnly) throws SQLException;

	boolean isReadOnly(C subject) throws SQLException;

	void setCatalog(C subject, String catalog) throws SQLException;

	String getCatalog(C subject) throws SQLException;

	void setTransactionIsolation(C subject, int level) throws SQLException;

	int getTransactionIsolation(C subject) throws SQLException;

	SQLWarning getWarnings(C subject) throws SQLException;

	void clearWarnings(C subject) throws SQLException;

	Statement createStatement(C subject, int resultSetType, int resultSetConcurrency)
			throws SQLException;

	PreparedStatement prepareStatement(C subject, String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException;

	CallableStatement prepareCall(C subject, String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException;

	Map<String, Class<?>> getTypeMap(C subject) throws SQLException;

	void setTypeMap(C subject, Map<String, Class<?>> map) throws SQLException;

	void setHoldability(C subject, int holdability) throws SQLException;

	int getHoldability(C subject) throws SQLException;

	Savepoint setSavepoint(C subject) throws SQLException;

	Savepoint setSavepoint(C subject, String name) throws SQLException;

	void rollback(C subject, Savepoint savepoint) throws SQLException;

	void releaseSavepoint(C subject, Savepoint savepoint) throws SQLException;

	Statement createStatement(C subject, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException;

	PreparedStatement prepareStatement(C subject, String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException;

	CallableStatement prepareCall(C subject, String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException;

	PreparedStatement prepareStatement(C subject, String sql, int autoGeneratedKeys)
			throws SQLException;

	PreparedStatement prepareStatement(C subject, String sql, int[] columnIndexes)
			throws SQLException;

	PreparedStatement prepareStatement(C subject, String sql, String[] columnNames)
			throws SQLException;

	Clob createClob(C subject) throws SQLException;

	Blob createBlob(C subject) throws SQLException;

	NClob createNClob(C subject) throws SQLException;

	SQLXML createSQLXML(C subject) throws SQLException;

	boolean isValid(C subject, int timeout) throws SQLException;

	void setClientInfo(C subject, String name, String value) throws SQLClientInfoException;

	void setClientInfo(C subject, Properties properties) throws SQLClientInfoException;

	String getClientInfo(C subject, String name) throws SQLException;

	Properties getClientInfo(C subject) throws SQLException;

	Array createArrayOf(C subject, String typeName, Object[] elements) throws SQLException;

	Struct createStruct(C subject, String typeName, Object[] attributes)
			throws SQLException;

	void setSchema(C subject, String schema) throws SQLException;

	String getSchema(C subject) throws SQLException;

	void abort(C subject, Executor executor) throws SQLException;

	void setNetworkTimeout(C subject, Executor executor, int milliseconds)
			throws SQLException;

	int getNetworkTimeout(C subject) throws SQLException;

}
