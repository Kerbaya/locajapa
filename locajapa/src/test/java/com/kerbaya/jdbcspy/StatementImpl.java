/*
 * Copyright 2019 Kerbaya Software
 * 
 * This file is part of locajapa. 
 * 
 * locajapa is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General public final License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * locajapa is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General public final License for more details.
 * 
 * You should have received a copy of the GNU General public final License
 * along with locajapa.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.kerbaya.jdbcspy;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

class StatementImpl<S extends Statement, I extends StatementInterceptor<? super S>> 
		extends WrapperImpl<S, I> 
		implements Statement
{
	private final ConnectionImpl connection;
	
	public StatementImpl(S wrapped, I ix, ConnectionImpl connection)
	{
		super(wrapped, ix);
		this.connection = connection;
	}

	@Override
	public final ResultSet executeQuery(String sql) throws SQLException
	{
		return ix.executeQuery(wrapped, sql);
	}

	@Override
	public final int executeUpdate(String sql) throws SQLException
	{
		return ix.executeUpdate(wrapped, sql);
	}

	@Override
	public final void close() throws SQLException
	{
		ix.close(wrapped);
	}

	@Override
	public final int getMaxFieldSize() throws SQLException
	{
		return ix.getMaxFieldSize(wrapped);
	}

	@Override
	public final void setMaxFieldSize(int max) throws SQLException
	{
		ix.setMaxFieldSize(wrapped, max);
	}

	@Override
	public final int getMaxRows() throws SQLException
	{
		return ix.getMaxRows(wrapped);
	}

	@Override
	public final void setMaxRows(int max) throws SQLException
	{
		ix.setMaxRows(wrapped, max);
	}

	@Override
	public final void setEscapeProcessing(boolean enable) throws SQLException
	{
		ix.setEscapeProcessing(wrapped, enable);
	}

	@Override
	public final int getQueryTimeout() throws SQLException
	{
		return ix.getQueryTimeout(wrapped);
	}

	@Override
	public final void setQueryTimeout(int seconds) throws SQLException
	{
		ix.setQueryTimeout(wrapped, seconds);
	}

	@Override
	public final void cancel() throws SQLException
	{
		ix.cancel(wrapped);
	}

	@Override
	public final SQLWarning getWarnings() throws SQLException
	{
		return ix.getWarnings(wrapped);
	}

	@Override
	public final void clearWarnings() throws SQLException
	{
		ix.clearWarnings(wrapped);
	}

	@Override
	public final void setCursorName(String name) throws SQLException
	{
		ix.setCursorName(wrapped, name);
	}

	@Override
	public final boolean execute(String sql) throws SQLException
	{
		return ix.execute(wrapped, sql);
	}

	@Override
	public final ResultSet getResultSet() throws SQLException
	{
		return ix.getResultSet(wrapped);
	}

	@Override
	public final int getUpdateCount() throws SQLException
	{
		return ix.getUpdateCount(wrapped);
	}

	@Override
	public final boolean getMoreResults() throws SQLException
	{
		return ix.getMoreResults(wrapped);
	}

	@Override
	public final void setFetchDirection(int direction) throws SQLException
	{
		ix.setFetchDirection(wrapped, direction);
	}

	@Override
	public final int getFetchDirection() throws SQLException
	{
		return ix.getFetchDirection(wrapped);
	}

	@Override
	public final void setFetchSize(int rows) throws SQLException
	{
		ix.setFetchSize(wrapped, rows);
	}

	@Override
	public final int getFetchSize() throws SQLException
	{
		return ix.getFetchSize(wrapped);
	}

	@Override
	public final int getResultSetConcurrency() throws SQLException
	{
		return ix.getResultSetConcurrency(wrapped);
	}

	@Override
	public final int getResultSetType() throws SQLException
	{
		return ix.getResultSetType(wrapped);
	}

	@Override
	public final void addBatch(String sql) throws SQLException
	{
		ix.addBatch(wrapped, sql);
	}

	@Override
	public final void clearBatch() throws SQLException
	{
		ix.clearBatch(wrapped);
	}

	@Override
	public final int[] executeBatch() throws SQLException
	{
		return ix.executeBatch(wrapped);
	}

	@Override
	public final Connection getConnection() throws SQLException
	{
		return connection;
	}

	@Override
	public final boolean getMoreResults(int current) throws SQLException
	{
		return ix.getMoreResults(wrapped, current);
	}

	@Override
	public final ResultSet getGeneratedKeys() throws SQLException
	{
		return ix.getGeneratedKeys(wrapped);
	}

	@Override
	public final int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException
	{
		return ix.executeUpdate(wrapped, sql, autoGeneratedKeys);
	}

	@Override
	public final int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException
	{
		return ix.executeUpdate(wrapped, sql, columnIndexes);
	}

	@Override
	public final int executeUpdate(String sql, String[] columnNames)
			throws SQLException
	{
		return ix.executeUpdate(wrapped, sql, columnNames);
	}

	@Override
	public final boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException
	{
		return ix.execute(wrapped, sql, autoGeneratedKeys);
	}

	@Override
	public final boolean execute(String sql, int[] columnIndexes) throws SQLException
	{
		return ix.execute(wrapped, sql, columnIndexes);
	}

	@Override
	public final boolean execute(String sql, String[] columnNames) throws SQLException
	{
		return ix.execute(wrapped, sql, columnNames);
	}

	@Override
	public final int getResultSetHoldability() throws SQLException
	{
		return ix.getResultSetHoldability(wrapped);
	}

	@Override
	public final boolean isClosed() throws SQLException
	{
		return ix.isClosed(wrapped);
	}

	@Override
	public final void setPoolable(boolean poolable) throws SQLException
	{
		ix.setPoolable(wrapped, poolable);
	}

	@Override
	public final boolean isPoolable() throws SQLException
	{
		return ix.isPoolable(wrapped);
	}

	@Override
	public final void closeOnCompletion() throws SQLException
	{
		ix.closeOnCompletion(wrapped);
	}

	@Override
	public final boolean isCloseOnCompletion() throws SQLException
	{
		return ix.isCloseOnCompletion(wrapped);
	}
	
}
