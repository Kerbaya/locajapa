/*
 * Copyright 2019 Kerbaya Software
 * 
 * This file is part of locajapa. 
 * 
 * locajapa is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * locajapa is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with locajapa.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.kerbaya.locajapa;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.kerbaya.jdbcspy.PreparedStatementInterceptorSupport;

public class PreparedStatementExecMon 
		extends PreparedStatementInterceptorSupport<PreparedStatement>
{
	private final ExecMonStats stats;
	
	public PreparedStatementExecMon(ExecMonStats stats)
	{
		this.stats = stats;
	}
	
	@Override
	public boolean execute(PreparedStatement subject, String sql) throws SQLException
	{
		stats.incrementExecCount();
		return super.execute(subject, sql);
	}
	
	@Override
	public boolean execute(PreparedStatement subject, String sql, int autoGeneratedKeys)
			throws SQLException
	{
		stats.incrementExecCount();
		return super.execute(subject, sql, autoGeneratedKeys);
	}
	
	@Override
	public boolean execute(PreparedStatement subject, String sql, int[] columnIndexes)
			throws SQLException
	{
		stats.incrementExecCount();
		return super.execute(subject, sql, columnIndexes);
	}
	
	@Override
	public boolean execute(PreparedStatement subject, String sql, String[] columnNames)
			throws SQLException
	{
		stats.incrementExecCount();
		return super.execute(subject, sql, columnNames);
	}
	
	@Override
	public int[] executeBatch(PreparedStatement subject) throws SQLException
	{
		stats.incrementExecCount();
		return super.executeBatch(subject);
	}
	
	@Override
	public ResultSet executeQuery(PreparedStatement subject, String sql) throws SQLException
	{
		stats.incrementExecCount();
		return super.executeQuery(subject, sql);
	}
	
	@Override
	public int executeUpdate(PreparedStatement subject, String sql) throws SQLException
	{
		stats.incrementExecCount();
		return super.executeUpdate(subject, sql);
	}
	
	@Override
	public int executeUpdate(PreparedStatement subject, String sql, int autoGeneratedKeys)
			throws SQLException
	{
		stats.incrementExecCount();
		return super.executeUpdate(subject, sql, autoGeneratedKeys);
	}
	
	@Override
	public int executeUpdate(PreparedStatement subject, String sql, int[] columnIndexes)
			throws SQLException
	{
		stats.incrementExecCount();
		return super.executeUpdate(subject, sql, columnIndexes);
	}
	
	@Override
	public int executeUpdate(PreparedStatement subject, String sql, String[] columnNames)
			throws SQLException
	{
		stats.incrementExecCount();
		return super.executeUpdate(subject, sql, columnNames);
	}
	
	@Override
	public boolean execute(PreparedStatement subject) throws SQLException
	{
		stats.incrementExecCount();
		return super.execute(subject);
	}

	@Override
	public ResultSet executeQuery(PreparedStatement subject) throws SQLException
	{
		stats.incrementExecCount();
		return super.executeQuery(subject);
	}
	
	@Override
	public int executeUpdate(PreparedStatement subject) throws SQLException
	{
		stats.incrementExecCount();
		return super.executeUpdate(subject);
	}
}
